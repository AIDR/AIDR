// default package
// Generated Nov 24, 2014 4:55:08 PM by Hibernate Tools 4.0.0
package qa.qcri.aidr.dbmanager.entities.misc;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.collection.internal.PersistentList;

import qa.qcri.aidr.dbmanager.entities.model.ModelFamily;
import qa.qcri.aidr.dbmanager.entities.model.NominalAttribute;
import qa.qcri.aidr.dbmanager.entities.task.Document;

/**
 * Crisis generated by hbm2java
 */
@Entity
@Table(name = "crisis", catalog = "aidr_predict", uniqueConstraints = @UniqueConstraint(columnNames = "code"))
public class Crisis implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7692349620189189978L;
	private Long crisisId;
	private Users users;
	private CrisisType crisisType;
	private String name;
	private String code;
	private boolean isTrashed;
	private List<NominalAttribute> nominalAttributes = null;
	private List<Document> documents = null;
	private List<ModelFamily> modelFamilies = null;

	public Crisis() {
	}

	public Crisis(Users users, CrisisType crisisType, String name, String code,
			boolean isTrashed) {
		this.users = users;
		this.crisisType = crisisType;
		this.name = name;
		this.code = code;
		this.isTrashed = isTrashed;
	}

	public Crisis(Users users, CrisisType crisisType, String name, String code,
			boolean isTrashed, List<NominalAttribute> nominalAttributes, List<Document> documents,
			List<ModelFamily> modelFamilies) {
		this.users = users;
		this.crisisType = crisisType;
		this.name = name;
		this.code = code;
		this.isTrashed = isTrashed;
		this.nominalAttributes = nominalAttributes;
		this.documents = documents;
		this.modelFamilies = modelFamilies;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "crisisID", unique = true, nullable = false)
	public Long getCrisisId() {
		return this.crisisId;
	}

	public void setCrisisId(Long crisisId) {
		this.crisisId = crisisId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userID", nullable = false)
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "crisisTypeID", nullable = false)
	public CrisisType getCrisisType() {
		return this.crisisType;
	}

	public void setCrisisType(CrisisType crisisType) {
		this.crisisType = crisisType;
	}

	@Column(name = "name", nullable = false, length = 140)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "code", unique = true, nullable = false, length = 64)
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "isTrashed", nullable = false)
	public boolean isIsTrashed() {
		return this.isTrashed;
	}

	public void setIsTrashed(boolean isTrashed) {
		this.isTrashed = isTrashed;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "crisis_nominal_attribute", catalog = "aidr_predict", joinColumns = { @JoinColumn(name = "crisisID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "nominalAttributeID", nullable = false, updatable = false) })
	public List<NominalAttribute> getNominalAttributes() {
		return this.nominalAttributes;
	}

	public void setNominalAttributes(List<NominalAttribute> nominalAttributes) {
		this.nominalAttributes = nominalAttributes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "crisis")
	public List<Document> getDocuments() {
		return this.documents;
	}

	public void setDocuments(List<Document> documents) {
		this.documents = documents;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "crisis")
	public List<ModelFamily> getModelFamilies() {
		return this.modelFamilies;
	}

	public void setModelFamilies(List<ModelFamily> modelFamilies) {
		this.modelFamilies = modelFamilies;
	}

	public boolean hasDocuments() {
		return ((PersistentList) this.documents).wasInitialized();
	}
	
	public boolean hasNominalAttributes() {
		return ((PersistentList) this.nominalAttributes).wasInitialized();
	}
	
	public boolean hasModelFamilies() {
		return ((PersistentList) this.modelFamilies).wasInitialized();
	}
}
