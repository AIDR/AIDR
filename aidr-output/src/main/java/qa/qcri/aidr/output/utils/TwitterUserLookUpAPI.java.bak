package qa.qcri.aidr.output.utils;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import qa.qcri.aidr.common.code.ResponseWrapperNEW;
import twitter4j.ResponseList;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.User;
import twitter4j.auth.AccessToken;

@Path("/misc/twitter")
@Deprecated
public class TwitterUserLookUpAPI {
	static String consumerKeyStr = "****";
	static String consumerSecretStr = "****";
	static String accessTokenStr = "****";
	static String accessTokenSecretStr = "****";


	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/username")
	@Deprecated
	public Response getTwitterUserData(TwitterUserLookUp userList) {
		String[] userNameList = null;
		long[] userIdList = null;
		if (userList != null) {
			if (userList.getUserNames() != null && !userList.getUserNames().isEmpty()) {
				try {
					userNameList = new String[userList.getUserNames().size()];
					int i = 0;
					for (String user: userList.getUserNames()) {
						userNameList[i] = user;
						//System.out.println("Going to fetch twitter IDs for the following set of screen names: " + userNameList[i]);
						++i;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (userList.getUserIds() != null && !userList.getUserIds().isEmpty()) {
				try {
					userIdList = new long[userList.getUserIds().size()];
					int i = 0;
					for (Long id: userList.getUserIds()) {
						userIdList[i] = id.longValue();
						//System.out.println("Going to fetch twitter IDs for the following set of screen IDs: " + userIdList[i]);
						++i;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		List<User> dataList = new ArrayList<User>();
		dataList.addAll(getUserDataFromScreenName(userNameList));
		dataList.addAll(getUserDataFromTwitterID(userIdList));
		
		if (!dataList.isEmpty()) {
			return Response.ok(dataList).build();
		}
		else {
			ResponseWrapperNEW response = new qa.qcri.aidr.common.code.ResponseWrapperNEW();
			response.setReturnCode("FETCH_TWITTER_ERROR");
			response.setDeveloperMessage("Error in twitter user data lookup");
			response.setUserMessages("Twitter user data lookup unsuccessful");
			return Response.ok(response).build();
		}

	}

	@Deprecated
	private List<User> getUserDataFromScreenName(String[] userNameList)	{		
		if (userNameList != null) {
			//System.out.println("input array size = " + userNameList.length);
			try {
				Twitter twitter = new TwitterFactory().getInstance();

				twitter.setOAuthConsumer(consumerKeyStr, consumerSecretStr);
				AccessToken accessToken = new AccessToken(accessTokenStr, accessTokenSecretStr);

				twitter.setOAuthAccessToken(accessToken);
				final int batchSize = 100;
				String[] batchList = new String[Math.min(userNameList.length, batchSize)];
				ResponseList<User> list = null; 
				for (int i = 0; i < userNameList.length;i = i + batchSize) {
					//System.out.println("i = " + i + ", user: " + userNameList[i] + ", size: " + Math.min(userNameList.length, batchSize));
					System.arraycopy(userNameList, i, batchList, 0, Math.min(userNameList.length, batchSize));
					ResponseList<User> tempList = twitter.lookupUsers(batchList);
					if (null == list) {
						list = tempList;
					} else {
						list.addAll(tempList);
					}
					//System.out.println("done lookup : " + i);
				}
				System.out.println("Successfully looked up in Twitter by screen name: " + (list != null ? list.size() : "null"));
				return list;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return new ArrayList<User>();
	}

	@Deprecated
	private List<User> getUserDataFromTwitterID(long[] userIdList)	{		
		if (userIdList != null) {
			//System.out.println("input array size = " + userIdList.length);
			try {
				Twitter twitter = new TwitterFactory().getInstance();

				twitter.setOAuthConsumer(consumerKeyStr, consumerSecretStr);
				AccessToken accessToken = new AccessToken(accessTokenStr, accessTokenSecretStr);

				twitter.setOAuthAccessToken(accessToken);
				final int batchSize = 100;
				long[] batchList = new long[Math.min(userIdList.length, batchSize)];
				ResponseList<User> list = null; 
				for (int i = 0; i < userIdList.length;i = i + batchSize) {
					//System.out.println("i = " + i + ", user: " + userIdList[i] + ", size: " + Math.min(userIdList.length, batchSize));
					System.arraycopy(userIdList, i, batchList, 0, Math.min(userIdList.length, batchSize));
					ResponseList<User> tempList = twitter.lookupUsers(batchList);
					if (null == list) {
						list = tempList;
					} else {
						list.addAll(tempList);
					}
					//System.out.println("done lookup : " + i);
				}
				System.out.println("Successfully looked up in Twitter by ID: " + (list != null ? list.size() : "null"));
				return list;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return new ArrayList<User>();
	}

}
